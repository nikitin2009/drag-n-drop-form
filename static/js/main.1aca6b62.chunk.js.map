{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDrop","files","setState","map","file","assign","preview","URL","createObjectURL","state","react_default","a","createElement","key","name","className","test","type","src","alt","href","onSubmit","e","preventDefault","htmlFor","id","rows","es","_ref","getRootProps","getInputProps","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAwEeA,qBAlEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,OAAS,SAACC,GACbR,EAAKS,SAAS,CACZD,MAAOA,EAAME,IAAI,SAAAC,GAAI,OAAIV,OAAOW,OAAOD,EAAM,CAC3CE,QAASC,IAAIC,gBAAgBJ,UAInCX,EAAKgB,MAAQ,CACXR,MAAO,IAVQR,wEAejB,IAAMQ,EAAQL,KAAKa,MAAMR,MAAME,IAAI,SAAAC,GAAI,OACrCM,EAAAC,EAAAC,cAAA,MAAIC,IAAKT,EAAKU,KAAMC,UAAU,QAC1B,SAASC,KAAKZ,EAAKa,MACjBP,EAAAC,EAAAC,cAAA,OACEM,IAAKd,EAAKE,QACVa,IAAKf,EAAKU,KACVC,UAAU,kBAEZL,EAAAC,EAAAC,cAAA,KAAGQ,KAAMhB,EAAKE,SAAUF,EAAKU,SAKrC,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,8BACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YAEbL,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,QAAMS,SAAW,SAAAC,GAAC,OAAIA,EAAEC,mBACtBb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,SAAOY,QAAQ,UAAUT,UAAU,WAAnC,iBACAL,EAAAC,EAAAC,cAAA,YAAUG,UAAU,eAAeU,GAAG,UAAUC,KAAK,OAEvDhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAU3B,OAAQJ,KAAKI,QACpB,SAAA4B,GAAA,IAAEC,EAAFD,EAAEC,aAAcC,EAAhBF,EAAgBE,cAAhB,OACCpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,MAASiB,EAAa,CAACd,UAAW,+BAChCL,EAAAC,EAAAC,cAAA,QAAWkB,KACXpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAAf,4DAEAd,EAAM8B,OACJrB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UAAKX,IAEL,QAKVS,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASF,UAAU,mBAAhC,qBAzDIiB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1aca6b62.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Dropzone from 'react-dropzone';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onDrop = (files) => {\n      this.setState({\n        files: files.map(file => Object.assign(file, {\n          preview: URL.createObjectURL(file)\n        }))\n      })\n    };\n    this.state = {\n      files: []\n    };\n  }\n\n  render() {\n    const files = this.state.files.map(file => (\n      <li key={file.name} className=\"mb-2\">\n        { /^image/.test(file.type)\n          ? <img\n              src={file.preview}\n              alt={file.name}\n              className=\"img-thumbnail\"\n            />\n          : <a href={file.preview}>{file.name}</a>\n        }\n      </li>\n    ));    \n\n    return (\n      <div className=\"App container pt-3\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-6\">\n\n            <h3>Leave a comment</h3>\n            <form onSubmit={ e => e.preventDefault()}>\n              <div className=\"form-group\">\n                <label htmlFor=\"comment\" className=\"sr-only\">Your comment:</label>\n                <textarea className=\"form-control\" id=\"comment\" rows=\"5\"></textarea>\n              </div>\n              <Dropzone onDrop={this.onDrop}>\n                {({getRootProps, getInputProps}) => (\n                  <div className=\"form-group\">\n                    <div {...getRootProps({className: 'dropzone p-3 mb-2 bg-light'})}>\n                      <input {...getInputProps()} />\n                      <div className=\"text-center\">Drag 'n' drop some files here, or click to select files</div>\n                    </div>\n                    { files.length\n                      ? <div>\n                        <h4>Files: </h4>\n                        <ul>{files}</ul>\n                      </div>\n                      : null\n                    }\n                  </div>\n                )}\n              </Dropzone>\n              <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}