{"version":3,"sources":["CommentsList/index.js","App.js","serviceWorker.js","index.js"],"names":["CommentsList","props","comments","map","c","i","react_default","a","createElement","className","key","text","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","commentText","localStorage","getItem","JSON","parse","files","onCommentChange","bind","assertThisInitialized","onDrop","onFormSubmit","setState","file","assign","preview","URL","createObjectURL","e","target","value","preventDefault","newComment","addComment","comment","_ref","concat","toConsumableArray","saveToLocal","setItem","stringify","_this$state","name","test","type","src","alt","href","length","src_CommentsList","onSubmit","htmlFor","id","rows","onChange","es","_ref2","getRootProps","getInputProps","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85ad463d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CommentsList = props => {\r\n  const comments = props.comments.map((c, i) => <li className=\"list-group-item list-group-item-primary\" key={c.text + i}>{c.text}</li>)\r\n\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {comments}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CommentsList;","import React, {Component} from 'react';\nimport Dropzone from 'react-dropzone';\n\nimport CommentsList from './CommentsList';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      commentText: '',\n      comments: localStorage.getItem('comments') \n                ? JSON.parse(localStorage.getItem('comments'))\n                : [],\n      files: [],\n    };\n\n    this.onCommentChange = this.onCommentChange.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onDrop(files) {\n    this.setState({\n      files: files.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      }))\n    })\n  };\n\n  onCommentChange(e) {\n    const commentText = e.target.value;\n\n    this.setState({ commentText });\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n\n    const newComment = {\n      text: this.state.commentText,\n      files: this.state.files\n    };\n\n    this.addComment(newComment);\n  }\n\n  addComment(comment) {\n    this.setState(({ comments }) => ({\n      comments: [...comments, comment],\n      commentText: '',\n      files: []\n    }),\n    this.saveToLocal);\n  }\n\n  saveToLocal() {\n    localStorage.setItem('comments', JSON.stringify(this.state.comments));\n  }\n\n  render() {\n    const { commentText, comments } = this.state;\n\n    const files = this.state.files.map(file => (\n      <li key={file.name} className=\"mb-2\">\n        { /^image/.test(file.type)\n          ? <img\n              src={file.preview}\n              alt={file.name}\n              className=\"img-thumbnail\"\n            />\n          : <a href={file.preview}>{file.name}</a>\n        }\n      </li>\n    ));\n\n    return (\n      <div className=\"App container pt-3\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-6\">\n\n          { comments.length\n            ? <CommentsList comments={comments} />\n            : null\n          }\n\n            <h3>Leave a comment</h3>\n            <form onSubmit={this.onFormSubmit}>\n              <div className=\"form-group\">\n                <label htmlFor=\"comment\" className=\"sr-only\">Your comment:</label>\n                <textarea\n                  className=\"form-control\"\n                  id=\"comment\"\n                  rows=\"5\"\n                  onChange={this.onCommentChange}\n                  value={commentText}\n                ></textarea>\n              </div>\n              <Dropzone onDrop={this.onDrop}>\n                {({getRootProps, getInputProps}) => (\n                  <div className=\"form-group\">\n                    <div {...getRootProps({className: 'dropzone p-3 mb-2 bg-light'})}>\n                      <input {...getInputProps()} />\n                      <div className=\"text-center\">Drag 'n' drop some files here, or click to select files</div>\n                    </div>\n                    { files.length\n                      ? <div>\n                        <h4>Files: </h4>\n                        <ul>{files}</ul>\n                      </div>\n                      : null\n                    }\n                  </div>\n                )}\n              </Dropzone>\n              <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}